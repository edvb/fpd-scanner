import yaml
import subprocess
import os
import re


def make_param_card(mChi, mPhi, tmpl_path='./inputs/param_tmpl_mChi_mPhi.dat',
                    save_path='./inputs/param_card_mChi{mChi}_mPhi{mPhi}.dat'):
    """
    Make card from template(formatable param card) and returns save path and text. Example formatable param card:

    ...
    57 {mChi} # MXd
    2000002 {mPhi} # MYS3u1
    ...

    """
    with open(tmpl_path, 'r') as tmpl_file:
        param_text = tmpl_file.read().format(mPhi=mPhi, mChi=mChi)

    save_path = save_path.format(mPhi=mPhi, mChi=mChi)
    with open(save_path, 'w+') as save_file:
        save_file.write(param_text)

    return save_path, param_text


def set_param_card(param_path, input_path='./inputs/input.yml'):
    """
    Set `param_card` field in input.yml to card in path. Param_path given must be in `inputs` folder.
    """
    with open(input_path, 'r') as input_file:
        input_dict = yaml.safe_load(input_file)

    input_dict['param_card'] = param_path.split('/')[-1]

    with open(input_path, 'w') as input_file:
        input_file.write(yaml.dump(input_dict))


def run_flow(point: str, script_path='./run.sh', output_folder='./yadage_logs'):
    """
    Runs shell script (generated by recast-cli) for executing yadage workflow.

    TODO: save output logs to output_folder.
    """

    subprocess.call(script_path, shell=True, stdout=open(os.devnull, 'w'))

    '''
    with open(output_folder + f'/{point}.log', 'w+') as output_file:
        subprocess.call(script_path, shell=True, stdout=output_file)
    '''


def get_decay(lhe_path='./workdir/madgraph/events.lhe', id='2000002'):
    """
    Get decay for particle id in lhe file
    """
    with open(lhe_path, 'r') as lhe_file:
        lhe_text = lhe_file.read()
        decay_line = re.findall(f"DECAY {id}.*$", lhe_text, re.MULTILINE)[0].split()
        decay = decay_line[2]
    return decay


def get_pb(lhe_path='./workdir/madgraph/events.lhe'):
    """
    Get Integrated Weight(pb) from lhe file.
    """
    with open(lhe_path, 'r') as lhe_file:
        lhe_text = lhe_file.read()
        pb_line = re.findall(f"Integrated weight.*$", lhe_text, re.MULTILINE)[0].split()
        pb = pb_line[-1]

    return pb


def get_points(mChis, mPhis, bars):
    """
    Generate list of input points. Note: len(bars) must equal len(mPhis)
    """
    return [(mChis[ii], mPhis[i]) for i in range(0, len(mPhis)) for ii in range(0, bars[i])]


def save_stats(point, decay, pb, save_path='./results.txt'):
    """
    Save stats as table.
    """
    with open(save_path, 'a+') as save_file:
        save_file.write(f"{point} {decay} {pb}\n")


def scan(mChis, mPhis, bars):
    input_points = get_points(mChis, mPhis, bars)

    for i in range(0, len(input_points)):
        mChi, mPhi = input_points[i]
        input_point = f'({mChi}, {mPhi})'

        print(f'{input_point:<10}: Generating Param Card')
        path, _ = make_param_card(mChi, mPhi)

        print(f'{input_point:<10}: Adding Param Card to Input')
        set_param_card(path)

        print(f'{input_point:<10}: Executing Workflow')
        run_flow(input_point)
        print(f'{input_point:<10}: Workflow Finished')

        decay = get_decay()
        print(f'{input_point:<10}: Decay is {decay}')

        pb = get_pb()
        print(f'{input_point:<10}: Cross-section(pb) is {pb}')

        save_stats(input_point, decay, pb)
        print(f'{input_point:<10}: Saved Stats\n\n')


if __name__ == '__main__':
    scan(mChis=[10, 100, 200, 300, 400, 500, 600, 700, 800, 1000, 1200, 1400, 1600, 2000],
         mPhis=[100, 300, 400, 500, 700, 1000, 1200, 1400, 1500, 2000, 2500, 3000, 3500, 4000],
         bars=[1, 3, 4, 5, 7, 9, 10, 11, 12, 13, 14, 14, 14, 14])
